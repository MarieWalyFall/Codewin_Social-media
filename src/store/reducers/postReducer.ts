import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Post, FilterByPosts, Comment } from 'types'; // Import the required types

interface PostState {
  baseUrl: string;
  posts: Post[] | null;
  filterByPosts: FilterByPosts | null;
  currPage: string | null;
  pageNumber: number;
  isPostsLoading: boolean;
  postsLength: number | null;
}

// Initialize state
const INITIAL_STATE: PostState = {
  baseUrl:
    process.env.NODE_ENV === 'production' ? '/' : 'http://localhost:3030/',
  posts: [],
  filterByPosts: null,
  currPage: null,
  pageNumber: 1,
  isPostsLoading: false,
  postsLength: null,
};

const postSlice = createSlice({
  name: 'posts',
  initialState: INITIAL_STATE,
  reducers: {
    setCurrPage: (state, action: PayloadAction<string | null>) => {
      state.currPage = action.payload;
    },
    setNextPage: (state, action: PayloadAction<number | undefined>) => {
      state.pageNumber = action.payload ?? state.pageNumber + 1;
    },
    setIsPostsLoading: (state, action: PayloadAction<boolean>) => {
      state.isPostsLoading = action.payload;
    },
    setPostsLength: (state, action: PayloadAction<number>) => {
      state.postsLength = action.payload;
    },
    addFilterByPosts: (state, action: PayloadAction<FilterByPosts>) => {
      state.filterByPosts = { ...state.filterByPosts, ...action.payload };
    },
    setFilterByPosts: (state, action: PayloadAction<FilterByPosts>) => {
      state.filterByPosts = action.payload;
    },
    setPosts: (state, action: PayloadAction<Post[]>) => {
      state.posts = [...action.payload];
    },
    addPost: (state, action: PayloadAction<Post>) => {
      state.posts = [action.payload, ...(state.posts || [])];
    },
    addPosts: (state, action: PayloadAction<Post[]>) => {
      state.posts = [...(state.posts || []), ...action.payload];
    },
    updatePost: (state, action: PayloadAction<Post>) => {
      state.posts =
        state.posts?.map((post) =>
          post.id === action.payload.id ? action.payload : post
        ) || null;
    },
    removePost: (state, action: PayloadAction<string>) => {
      state.posts =
        state.posts?.filter((post) => post.id !== action.payload) || null;
    },
    addComment: (state, action: PayloadAction<Comment>) => {
      const comment = action.payload;
      state.posts =
        state.posts?.map((post) => {
          if (post.id === comment.postId) {
            post.comments.unshift(comment);
            return post;
          }
          return post;
        }) || null;
    },
    updateComment: (state, action: PayloadAction<Comment>) => {
      const updatedComment = action.payload;
      state.posts =
        state.posts?.map((post) => {
          if (post.id === updatedComment.postId) {
            const idx = post.comments.findIndex(
              (c) => c.id === updatedComment.id
            );
            post.comments[idx] = updatedComment;
            return post;
          }
          return post;
        }) || null;
    },
    removeComment: (state, action: PayloadAction<Comment>) => {
      const comment = action.payload;
      state.posts =
        state.posts?.map((post) => {
          if (post.id === comment.postId) {
            post.comments = post.comments.filter((c) => c.id !== comment.id);
            return post;
          }
          return post;
        }) || null;
    },
  },
});

// Export actions generated by createSlice
export const {
  setCurrPage,
  setNextPage,
  setIsPostsLoading,
  setPostsLength,
  addFilterByPosts,
  setFilterByPosts,
  setPosts,
  addPost,
  addPosts,
  updatePost,
  removePost,
  addComment,
  updateComment,
  removeComment,
} = postSlice.actions;

// Export the reducer to be used in the store setup
export const postReducer = postSlice.reducer;
