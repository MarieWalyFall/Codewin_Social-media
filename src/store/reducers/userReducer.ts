import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { User } from 'types'; // Adjust the import path if needed

interface FilterByUsers {
  [key: string]: any; // Adjust the type according to the expected structure
}

interface UserState {
  loggedInUser: User | null;
  users: User[] | null;
  usersToAdd: User[] | null; // Adjust if needed
  filterByUsers: FilterByUsers | null;
  connectedUsers: User[]; // Array of connected users
  isLogingLoading: boolean;
}
// Initialize state
const INITIAL_STATE: UserState = {
  loggedInUser: null,
  users: null,
  usersToAdd: null,
  filterByUsers: null,
  connectedUsers: [],
  isLogingLoading: false,
};

// Create a slice for the user reducer
const userSlice = createSlice({
  name: 'user',
  initialState: INITIAL_STATE,
  reducers: {
    setUsers: (state, action: PayloadAction<User[]>) => {
      state.users = action.payload;
    },
    setFilterByUsers: (state, action: PayloadAction<FilterByUsers>) => {
      state.filterByUsers = { ...action.payload };
    },
    setIsLoadingLoging: (state, action: PayloadAction<boolean>) => {
      state.isLogingLoading = action.payload;
    },
    login: (state, action: PayloadAction<User>) => {
      state.loggedInUser = action.payload;
    },
    getLoggedInUser: (state, action: PayloadAction<User>) => {
      state.loggedInUser = action.payload;
    },
    signup: (state, action: PayloadAction<User>) => {
      state.loggedInUser = action.payload;
    },
    logout: (state) => {
      state.loggedInUser = null;
    },
    addUser: (state, action: PayloadAction<User>) => {
      if (state.users) {
        state.users = [...state.users, action.payload];
      } else {
        state.users = [action.payload];
      }
    },
    updateUser: (state, action: PayloadAction<User>) => {
      state.users =
        state.users?.map((user) =>
          user.id === action.payload.id ? action.payload : user
        ) || null;
    },
    updateLoggedInUser: (state, action: PayloadAction<User>) => {
      state.loggedInUser = action.payload;
    },
    setConnectedUsers: (state, action: PayloadAction<User[]>) => {
      state.connectedUsers = action.payload;
    },
    addConnectedUser: (state, action: PayloadAction<User>) => {
      state.connectedUsers = [...state.connectedUsers, action.payload];
    },
  },
});

// Export actions generated by createSlice
export const {
  setUsers,
  setFilterByUsers,
  setIsLoadingLoging,
  login,
  getLoggedInUser,
  signup,
  logout,
  addUser,
  updateUser,
  updateLoggedInUser,
  setConnectedUsers,
  addConnectedUser,
} = userSlice.actions;

// Export the reducer to be used in the store setup
export const userReducer = userSlice.reducer;
