import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Chat } from 'types';

interface ChatState {
  chats: Chat[];
}
// Initial state with type
const INITIAL_STATE: ChatState = {
  chats: [
    {
      id: 'chat1',
      userId: 'u1',
      userId2: 'u2',
      messages: [
        {
          id: 'm1',
          body: "Hey, how's it going?",
          userId: 'u1',
          createdAt: '1689123456789',
          senderId: '',
        },
        {
          id: 'm2',
          body: "I'm doing well, thanks! What about you?",
          userId: 'u2',
          createdAt: '1689123460000',
          senderId: '',
        },
        {
          id: 'm3',
          body: "I'm good too, just busy with some work.",
          userId: 'u1',
          createdAt: '1689123470000',
          senderId: '',
        },
      ],
      createdAt: String(new Date(1689123400000)),
    },
    {
      id: 'chat2',
      userId: 'u1',
      userId2: 'u3',
      messages: [
        {
          id: 'm4',
          body: 'Hey Bob, are you joining the meeting today?',
          userId: 'u1',
          createdAt: '1689123600000',
          senderId: '',
        },
        {
          id: 'm5',
          body: 'Yes, Iâ€™ll be there in 5 minutes!',
          userId: 'u3',
          createdAt: '1689123650000',
          senderId: '',
        },
      ],
      createdAt: String(new Date(1689123500000)),
    },
  ],
};

// Create a slice for the chat reducer
const chatSlice = createSlice({
  name: 'chat',
  initialState: INITIAL_STATE,
  reducers: {
    setChats: (state, action: PayloadAction<Chat[]>) => {
      state.chats = [...action.payload];
    },
    addChat: (state, action: PayloadAction<Chat>) => {
      state.chats = [action.payload, ...state.chats];
    },
    updateChat: (state, action: PayloadAction<Chat>) => {
      state.chats = state.chats.map((chat) =>
        chat.id === action.payload.id ? action.payload : chat
      );
    },
    removeChat: (state, action: PayloadAction<string>) => {
      state.chats = state.chats.filter((chat) => chat.id !== action.payload);
    },
  },
});

// Export actions generated by createSlice
export const { setChats, addChat, updateChat, removeChat } = chatSlice.actions;

// Export the reducer to be used in the store setup
export const chatReducer = chatSlice.reducer;
